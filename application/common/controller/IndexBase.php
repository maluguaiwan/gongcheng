<?php
namespace app\common\controller;
use app\common\model\Module as ModuleModel;
use org\tools\OAuthTool;
use org\tools\HttpTool;
use think\facade\Cache;
use think\facade\Log;
use think\Request;

/** 默认前台公用基础控制器
 * Class IndexBase
 * @package app\common\controller
 */
class IndexBase extends AppBase
{
	protected $openid;
	protected $member;
	protected $isDoctor = false;
	protected $is_userinfo = true;
	
    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $module=request()->module();
        $status=(new ModuleModel())->where(['name'=>$module])->value('status');
        if($status == 0){
            $this->error('你访问的地址不存在,<br/> 正在为你跳转。。。',config('app.default_module').'/index/index');
        }
        
        $this->authorize();
        if(!$this->request->isAjax()){
        	$this->assign('title','药到家');
        	$this->assign('is_doctor',$this->isDoctor?1:0);
        	$this->assign ( 'openid', $this->openid );
        	$this->assign ( 'member', $this->member );
        	$this->setShareData();
        }
        
        
    }
	
    public function setShareData()
    {
    	$link = HttpTool::getDomain();
    	$data = config('weixin.share_info');
    	if(empty($data)){
    		$data = [
    				'title' => '注册会员，享受更多好礼~',
    				'desc'  => '好大夫在线商城，注册会员享受更多好礼',
    				'image' => '/static/home/images/logo.png'
    		];
    	}
    	$data['image'] = HttpTool::getDomain().$data['image'];
    	$this->simpleShare ( $data['image'], $data['title'], $data['desc'], $link);
    }
    
    protected function authorize(){
    	$openid='';
    	$mmeber = OAuthTool::isMember();
    	if ($this->getOauthFromWeixinReturn ($openid)) {
    		$this->openid = $openid;
    	} elseif (OAuthTool::isMember()) { // cookie 中有oauth 信息
    		Log::write('isMember');
    		$this->openid = OAuthTool::member();
    		Log::write('openid:'.$this->openid);
    		
    		$find = db('member')->where(['openid'=>$this->openid])->find();
    		$time = time()-3600*24*7;
    		if(empty($find['nickname']) || $find['update_time'] < $time){
    		    // 没有会员 或者 超过一个星期 重新获取授权
    		    $this->oauth(request()->url(true),time(),'snsapi_userinfo');
    		    exit();
    		}
    		if($find['type'] == 2){
    			// type = 2 时 为医生
    			$this->isDoctor = true;
    		}
    		$this->member = $find;
    	} elseif ($this->checkWxAgent()) { // 微信授权
    		Log::write('checkWxAgent');
    		if($this->is_userinfo){
    			$this->oauth(request()->url(true),time(),'snsapi_base');
    		}else{
    			$this->oauth(request()->url(true),time());
    		}
    	} else {
    		// 非微信浏览器访问不了
    	    $this->oauth(request()->url(true),time(),'snsapi_base');
    	}
    }
    
    public function oauth($url, $state, $scope = 'snsapi_base')
    {
    	$id = $this->_oauth($url, $scope, $state,true);
    	$redirect_uri = urlencode($url);
    	$appid = config('weixin.appid');
    	$oauth_url = "https://open.weixin.qq.com/connect/oauth2/authorize?appid={$appid}&redirect_uri=$redirect_uri&response_type=code&scope=$scope&state=$state#wechat_redirect";
    	$this->redirect($oauth_url);
    }
    
    private function _oauth($url, $scope, $state,$log=false)
    {
    	$scope = $scope ?  : 'snsapi_base'; // snsapi_base
    	session('weixin_oauth_state', $state);
    	if($log){
    		$authorize = array(
    				'redirect_uri' => $url,
    				'scope' => $scope,
    				'state' => $state,
    				'appid' => config('weixin.appid'),
    				'create_time' => time(),
    		);
    		$id = db('authorize')->insertGetId($authorize);
    		$authorize['id'] = $id;
    		cache('__OUATH2_AUTHORIZE_' . $id, $authorize, 20);
    		return $id;
    	}
    	return 0;
    }
    
    /**
     * 获取从WeixinOauth 返回的科技
     */
    protected function getOauthFromWeixinReturn(&$return) {
    	if (!$this->request->isAjax() && $this->checkWxAgent()) {
    		$data = weixin ()->oauthResult();
    		if (is_array ( $data ) && isset ( $data ['openid'] )) {
    			Log::write('getOauthFromWeixinReturn'.__FILE__.__LINE__);
    			Log::write('getOauthFromWeixinReturnParam'.__FILE__.__LINE__);
    			if(!empty($data['nickname'])){
    			    unset($data['privilege']);
    			    $find = db('member')->where(['openid'=>$data['openid']])->find();
    			    if($find){
    			        $data['update_time'] = time();
    			        db('member')->where(['id'=>$find['id']])->update($data);
    			    }else{
    			    	Log::write('member not found');
    			    	Log::write('request_pid:'.$this->request->param('pid'));
    			    	Log::write('request_type:'.$this->request->param('type'));
    			    	$url = $this->request->url(true);
    			    	Log::write('request_url:'.$url);
    			    	$pid = $this->request->param('pid',0);
    			    	$type = $this->request->param('type',1);
    			    	$data['parent_id'] = $pid;
    			    	$data['update_time'] = time();
    			    	$data['create_time'] = time();
    			    	$data['type'] = $type;
    			    	$insert['status'] = $type == 1 ? 1 : 0;
    			    	$memberId = db('member')->insertGetId($data);
    			    	Log::write('memberID:'.$memberId);
    			    	Log::write('sql:'. db('member')->getLastSql());
    			    	if($memberId){
    			    		if($type == 2){
    			    			$doctor = [
    			    					'id' => $memberId,
    			    					'update_time' => time()
    			    			];
    			    			$this->isDoctor = true;
    			    			db('doctor_info')->insert($doctor);
    			    		}else{
    			    			reward($type,$memberId);
    			    		}
    			    	}
    			    }
    			}else{
    				$find = db('member')->where(['openid'=>$data['openid']])->find();
    				if(!$find){
    					Log::write('only openid');
    					Log::write('request_pid:'.$this->request->param('pid'));
    					Log::write('request_type:'.$this->request->param('type'));
    					$url = $this->request->url(true);
    					Log::write('request_url:'.$url);
    					$pid = $this->request->param('pid',0);
    					$type = $this->request->param('type',1);
    					$insert['openid'] = $data['openid'];
    					$insert['create_time'] = time();
    					$insert['update_time'] = time();
    					$insert['parent_id'] = $pid;
    					$insert['type'] = $type;
    					$insert['status'] = $type == 1 ? 1 : 0;
    					$memberId = db('member')->insertGetId($insert);
    					if($memberId){
    						if($type == 2){
    							$doctor = [
    									'id' => $memberId,
    									'update_time' => time()
    							];
    							$this->isDoctor = true;
    							db('doctor_info')->insert($doctor);
    						}else{
    							reward(0,$memberId);
    						}
    					}
    				}
    			}
    			OAuthTool::member($data['openid']);
    			$return=$data['openid'];
    			return true;
    		}
    	}
    	return false;
    }
    
    function checkWxAgent() {
    	$agent = $_SERVER ['HTTP_USER_AGENT'];
    	if (strpos ( $agent, "MicroMessenger" ) > 0) {
    		return true;
    	} else {
    		return false;
    	}
    }
    
    /**
     * 配置分享
     * array (
     * 'share' => array ('image' => '','url' => '','desc' => '','title' => '' ),
     * 'disable' => array ('appmessage' => '','timeline' => '' ),
     * 'callback' => array ('data' => array (),'url' => '' )
     * );
     *
     * @param array $share
     *        	分享的内容
     * @param array $disable
     *        	禁止分享
     * @param array $callback
     *        	分享后回调
     */
    public function configShare($share = array(), $disable = null, $callback = null,$ticketUrl='/weixin/ticket') {
    	$config = array ();
    	if ( !$share ||!is_array($share)) {
    		$share=[];
    	}
    	if (! empty ( $disable )) {
    		$config['disable'] = $disable;
    	}
    	if (! empty ( $callback )) {
    		$config['callback'] = $callback;
    	}
    	if(!empty($ticketUrl)){
    		$config['ticket']=$ticketUrl;
    	}
    	$config['share'] = $share;
    	$config['debug'] = false;
    	$config['appId'] = config('weixin.appid');
    	$this->assign ( 'shareConfig', json_encode($config) );
    }
    /**
     * 简单的分享
     *
     * @param string $image
     *        	图片地址
     * @param string $title
     *        	分享标题
     * @param string $desc
     *        	分享描述
     * @param string $url
     *        	分享链接 可以为空 默认为本页面地址
     */
    public function simpleShare($image, $title, $desc, $url = '') {
    	$this->configShare ( [
    			'image' => $image,
    			'title' => $title,
    			'desc' => $desc,
    			'url' => $url
    	] );
    }
    /**
     * 禁止分享 string "本页面禁止分享"<br/>
     * 禁止分享给跟人 array array('appmessage'=>'本页面禁止分享给朋友') <br/>
     * 禁止分享到朋友圈 array array('timeline'=>'本页面禁止分享到朋友圈')<br/>
     *
     * @param string|array $config
     */
    public function disableShare($config = '') {
    	return $this->configShare ( [ ], $config ?  : '本页面禁止分享' );
    }
    /**
     * 获取微信转发的ticket
     * @param int $cid
     * @param string $type service|corp
     */
    public function getShareTicket() {
    	try{
    		$weixin=weixin();
    		$ticket = $this->getJsApiTicket($weixin);
    		if (! $ticket) $ticket = - 1;
    		return [
    				'appid' => $weixin->getAppid(),
    				'ticket' => $ticket,
    				'status' => 1
    		];
    	}catch (\Exception $e){
    		return 	[
    				'appid' => '',
    				'ticket' => -1,
    				'status' => 0
    		];
    	}
    }
    /**
     *
     * @param Weixin $weixin
     * @param string $type
     */
    private function getJsApiTicket($weixin) {
    	$CACHE_KEY = 'JS_TICKET_' . $weixin->getAppid();
    	$ticket = Cache::get ( $CACHE_KEY );
    	if (! $ticket) {
    		$result = $weixin->ticket ();
    		Log::write("-------------------------------------------");
    		Log::write(json_encode($result));
    		if (isset ( $result['ticket'] ) && isset ( $result['expires_in'] )) {
    			$ticket = $result['ticket'];
    			$expires_in = ( int ) $result['expires_in'];
    			Cache::set ( $CACHE_KEY, $ticket, $expires_in - 200 );
    		}
    	}
    	return $ticket;
    }
}